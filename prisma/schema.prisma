// remember to run `npx prisma generate` after modifying this file
// then run prisma db push to apply changes to the database

//npx prisma generate
//npx prisma db push

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String         @unique
  emailVerified Boolean? @default(false)
  hashedPassword String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  
  // Onboarding & preferences
 
  country            String?     // "NG", "US", etc.
  currency           String?     // "NGN", "USD", etc. 
  signature          String?     // URL/path to signature image
  onboardingCompleted Boolean    @default(false)
  
  // Business relationships
  businesses      Business[]
  clients         Client[]
  invoices        Invoice[]
  paymentAccounts PaymentAccount[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Client {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  address        String
  email          String
  userId         String @db.ObjectId
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Business {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  businessName       String
  businessType       String?     // "freelancer", "consultant", "service_provider", etc.
  email              String
  userId             String @db.ObjectId
  isDefault          Boolean @default(false) // For users with multiple businesses
  
  // Detailed address fields
  addressLine1       String?
  addressLine2       String?  
  city              String?
  state             String?
  zipCode           String?
  phone             String?
  
  // Branding & preferences
  logo              String?     // URL/path to logo image
  
  // Payment defaults
  defaultPaymentTerms String?   // "net_30", "net_15", "due_on_receipt"
  defaultLateFee     String?    // "1.5_percent", "25_flat", "none"
  defaultInvoiceNotes String?   // "Thank you for your business..."
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentAccount {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  gatewayType  String   // "paypal", "nigerian_bank", "ach", "wise"
  accountName  String   // "Main PayPal", "GTBank Business"
  accountData  Json     // Gateway-specific details
  isActive     Boolean  @default(true)
  isDefault    Boolean  @default(false)
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([userId, gatewayType, isDefault]) // Only one default per gateway type per user
}

model Invoice {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber          String        @unique
  invoiceDate            DateTime
  paymentDueDate         DateTime
  subtotal               Float
  taxes                  Float
  finalTotal             Float
  paymentTerms           String
  acceptedPaymentMethods String
  
  businessId String @db.ObjectId
  clientId   String @db.ObjectId
  userId     String @db.ObjectId
  
  business Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  client   Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    InvoiceItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  description String
  quantity    Int
  unitPrice   Float
  totalAmount Float
  
  invoiceId String @db.ObjectId
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
